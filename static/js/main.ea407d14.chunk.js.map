{"version":3,"sources":["logo.svg","ipfs.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ipfs","IPFS","window","Ipfs","repo","Math","random","EXPERIMENTAL","pubsub","config","Addresses","Swarm","on","Object","asyncToGenerator","regenerator_default","a","mark","_callee","id","wrap","_context","prev","next","sent","console","log","stop","this","Room","require","App","room","peerToSend","state","messages","newMessage","yours","push","from","data","setState","sendTo","_this2","peer","_ref2","_ref","toString","_x","apply","arguments","_this3","msgs","forEach","msg","i","react_default","createElement","style","padding","key","className","onChange","e","target","value","onClick","bind","onMsgClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea407d14.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nconst IPFS = window.Ipfs\n\nconst ipfs = new IPFS({\n  repo: repo(),\n  EXPERIMENTAL: {\n    pubsub: true\n  },\n  config: {\n    Addresses: {\n      Swarm: [\n        '/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star'\n      ]\n    }\n  }\n});\n\nipfs.on('ready',  async () => {\n    const id = await ipfs.id();\n    console.log('ipfs is ready', id.id);\n})\n\nfunction repo() {\n  return 'ipfs' + Math.random()\n}\n\nexport default ipfs;\n\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport ipfs from './ipfs';\nimport './App.css';\nconst Room = require('ipfs-pubsub-room')\n\nclass App extends Component {\n  room = null;\n  peerToSend = null;\n  state = {\n    room: '',\n    messages: [],\n    newMessage: ''\n  }\n  \n  onMsgClick() {\n    let yours = this.state.messages;\n    yours.push({from: 'You', data: this.state.newMessage});\n    this.setState({messages: yours});\n    this.room.sendTo(this.peerToSend, this.state.newMessage)\n  }\n  onClick() {\n\n    let room = Room(ipfs, this.state.room);\n    this.room = room;\n    room.on('peer joined', (peer) => {\n      this.peerToSend = peer;\n      console.log('Peer joined the room', peer);\n      room.sendTo(peer, 'Privet suka');\n    })\n\n    room.on('peer left', (peer) => {\n      console.log('Peer left...', peer)\n    })\n\n    // now started to listen to room\n    room.on('subscribed', () => {\n      console.log('Now connected!')\n    })\n    room.on('message', async ({from, data}) => {\n      let messages = this.state.messages;\n      messages.push({\n        from,\n        data: data.toString()\n      })\n      this.setState({messages})\n      console.log('message received from ', from, ': ', data.toString() );\n    })\n  }\n\n  render() {\n    console.log('fix s')\n    let msgs = [];\n    this.state.messages.forEach((msg, i) => {\n      msgs.push(<div style={{padding: '5px'}} key={i}>From: {msg.from}<br/>Message: {msg.data}</div>)\n    })\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        Current room: {this.state.room} <br/>\n        <div>\n          New Room id: <input onChange={(e) => this.setState({room: e.target.value})} value={this.state.room}/>\n          <button onClick={this.onClick.bind(this)}>Create/Join room</button>\n        </div>\n        <div>\n          Room messages: <br/>\n          {msgs} <br/>\n          <br/>\n          <br/>\n          Send message <input onChange={(e) => this.setState({newMessage: e.target.value})} value={this.state.newMessage}/>\n          <button onClick={this.onMsgClick.bind(this)}>Send message</button>\n        </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}